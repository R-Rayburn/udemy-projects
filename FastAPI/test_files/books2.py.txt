from fastapi import FastAPI, HTTPException, Request, Header
from starlette import status
from pydantic import BaseModel, Field
from uuid import UUID
from typing import Optional
from starlette.responses import JSONResponse


class NegativeNumberException(Exception):
    def __init__(self, books_to_return):
        self.books_to_return = books_to_return


app = FastAPI()


class Book(BaseModel):
    id: UUID
    title: str = Field(title='Title of book',
                       min_length=1)
    author: str = Field(title='Author of book',
                        min_length=1,
                        max_length=100)
    description: Optional[str] = Field(title='Description of book',
                                       min_length=1,
                                       max_length=100)
    rating: int = Field(title='Rating of book',
                        ge=0,
                        le=100)

    class Config:
        schema_extra = {
            'example': {
                'id': '84CA4E39-40CF-453C-A11C-9C56BBB92C9F',
                'title': 'Example Title',
                'author': 'Example Author',
                'description': 'Description of book',
                'rating': 85
            }
        }


class BookNoRating(BaseModel):
    id: UUID
    title: str = Field(min_length=1)
    author: str
    description: Optional[str] = Field(
        None, title='description of the Book',
        max_length=100,
        min_length=1
    )


BOOKS = []

NOT_FOUND_EXCEPTION = HTTPException(status_code=404,
                                    detail='Book not found.',
                                    headers={'X-Header-Error':
                                             'Nothing to be seen at the UUID'})


@app.exception_handler(NegativeNumberException)
async def negative_number_exception_handler(request: Request,
                                            exception: NegativeNumberException):
    return JSONResponse(
        status_code=418,
        content={'message': f'You can not read backwards here, why do you want {exception.books_to_return}'}
    )


# @app.post('/books/login')
# async def books_login(username: str = Form(), password: str = Form()):
#     return {"username": username, "password": password}


@app.post('/books/login/')
async def books_login(book_id: int = None,
                      username: Optional[str] = Header(None),
                      password: Optional[str] = Header(None)):
    if password == 'test1234!' and username == 'FastAPIUser':
        return BOOKS[book_id]
    return "Invalid User"


@app.get('/header')
async def read_header(random_header: Optional[str] = Header(None)):
    return {'Random-Header': random_header}


@app.get('/')
async def read_all_books(books_to_return: Optional[int] = None):
    if books_to_return and books_to_return < 0:
        raise NegativeNumberException(books_to_return=books_to_return)
    if len(BOOKS) < 1:
        create_books_no_api()
    if books_to_return and len(BOOKS) >= books_to_return > 0:
        return BOOKS[:books_to_return]
    return BOOKS


@app.get('/book/{book_id}')
async def read_book(book_id: UUID):
    for book in BOOKS:
        if book.id == book_id:
            return book
    raise NOT_FOUND_EXCEPTION


@app.get('/book/rating/{book_id}', response_model=BookNoRating)
async def read_book_no_rating(book_id: UUID):
    for book in BOOKS:
        if book.id == book_id:
            return book
    raise NOT_FOUND_EXCEPTION


@app.post('/', status_code=status.HTTP_201_CREATED)
async def create_book(book: Book):
    BOOKS.append(book)
    return book


@app.put('/book/{book_id}')
async def update_book(book_id: UUID, book: Book):
    for i, b in enumerate(BOOKS):
        if b.id == book_id:
            BOOKS[i] = book
            return BOOKS[i]
    raise NOT_FOUND_EXCEPTION


@app.delete('/book/{book_id}')
async def delete_book(book_id: UUID):
    for i, b in enumerate(BOOKS):
        if b.id == book_id:
            del BOOKS[i]
            return f'ID:{book_id} deleted.'
    raise NOT_FOUND_EXCEPTION


def create_books_no_api():
    book_1 = Book(id='5F446243-B636-4AEA-8FBE-73B5C1D5BA88',
                  title='Title 1',
                  author='Author 1',
                  description='Description 1',
                  rating=60)
    book_2 = Book(id='A8EAE81F-8E29-4559-8486-82C0BA02FB7D',
                  title='Title 2',
                  author='Author 2',
                  description='Description 2',
                  rating=42)
    book_3 = Book(id='6D6FE661-310E-433B-96CF-955DD05F6A06',
                  title='Title 3',
                  author='Author 3',
                  rating=85)
    book_4 = Book(id='39AF101C-C30D-4627-B121-E3EAA99DF73F',
                  title='Title 4',
                  author='Author 4',
                  rating=99)
    BOOKS.extend([book_1, book_2, book_3, book_4])
